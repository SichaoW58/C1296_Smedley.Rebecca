rownames_to_column("variable") %>%
gt()
tetrachoric$rho %>% round(2) %>% data.frame() %>%
rownames_to_column("") %>%
gt()
tetrachoric$rho %>% round(2) %>% data.frame() %>%
rownames_to_column(" ") %>%
gt()
#| label: cor-polychor
#| warning: false
polychoric<-polychoric(Dat_Melanoma_clean %>% select(Ki67,location_self,location_report) %>% mutate_all(as.character) %>% mutate_all(as.numeric))
polychoric$rho %>% round(2) %>% data.frame() %>%
rownames_to_column(" ") %>%
gt()
pigment_cellcount
#| label: load-packages
#| include: false
pacman::p_load(## file folder setup
fs,   # creat folder dir_create()
here, # easy to do cross reference in the project.
## Data step
readr,
readxl, # read_excel()
tidyverse,
janitor,
## IDA
Hmisc,
## Model
meta,
metafor,
# dmetar, #for find.outliers()
lme4,
glmmTMB,
broom,
emmeans,
rpart, # for dx2y()
psych, #
confintr, #for cramersv(), also good bootstrap CI tools.
DTComPair, # for sensitivity, specificity, PPV and NPV for diagnostics tests.
## result reporting
### graph
ggplot2,
### table
gt,
gtsummary,
knitr,        # for kable()
sjPlot      # tab_model()
)
set.seed(42004063)
#| label: setup-folder
#| include: false
# create the default folder/subfolder
dir_create(here("Data"))  # store raw data, clean data.
dir_create(here("Data/Source"))
dir_create(here("Data/Clean"))
dir_create(here("Documents"))  # all the docs
dir_create(here("Code"))       # r code
dir_create(here("E-mails"))    # correspondence
# Declare location of this script relative to the project root directory.
here::i_am(path = "Code/C1296_Smedley_Ki67.qmd")  #save the qmd under code first and run this line.
# dir_ls()    # briefly check
# dir_tree()  # Show the tree, not necessary, takes time.
# dir_tree("Data")
#| label: import-data
#| include: false
#I have tried whole morning to import data all show can not open connection. Start a new qmd and copy paste code works
Melanoma_Project_For_STATS_final <- read_csv(here("Data/Raw/Melanoma Project For STATS final.csv"),
col_types = cols(`Case  Number` = col_character(),
`GOLD STANDARD    Ki67: >15%= 1, <15% = 0` = col_factor(levels = c("1",
"0")), `1= haired 2=both 3= conjunctiva - slides we look at in person` = col_factor(levels = c("1",
"2", "3")), `For stats, all locations for all cases, including slides we didn't see in person (1= haired 2=haired/junction 3= conjunctiva 4= unknown` = col_factor(levels = c("1",
"2", "3", "4")), `Female/Male` = col_factor(levels = c("F",
"M")), `Intact/altered` = col_factor(levels = c("I",
"A")), `nuclear atypia: >20%= 1, <20% =0` = col_factor(levels = c("0",
"1")), `mitotic count 3+ = 1, <3=0` = col_factor(levels = c("0",
"1")), `degree of pigmentation (<50%, low, moderate =1), >50%  or high = 0` = col_factor(levels = c("0",
"1")), `ulceration yes=1, no=0` = col_factor(levels = c("0",
"1")), `beyond dermis= 1, not beyond dermis =0` = col_factor(levels = c("0",
"1")), `>0.95 cm = 1, <0.95 cm = 0` = col_factor(levels = c("0",
"1")), `tumor thickness (cm)` = col_number(),
`Mitotic count (in 10 hpf)` = col_number()))
Dat_Melanoma_clean <- Melanoma_Project_For_STATS_final %>% clean_names() %>% set_names("case_number","Ki67","location_self","location_report","sex","intact","nuclear_atypia","mitotoc","pigment","ulceration","beyond_dermis","size","tumor_thickness","mitotic_count")
#|label: IDA-describe
#gotta use namespace Hmisc otherwise out of script
d_Melanoma <- Hmisc::describe(Dat_Melanoma_clean)
Hmisc::html(d_Melanoma, size=90, scroll=TRUE)
#| label: tbl-descriptive-stats
#| tbl-cap: Descriptive-stats by Ki67 status
Dat_Melanoma_clean %>%
select(-case_number) %>%
tbl_summary(
by = "Ki67",
type = all_continuous() ~ "continuous2",
statistic = list(
all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})"),
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = all_continuous() ~ 2,
missing_text = "(Missing)"
) %>%
add_p(pvalue_fun = ~ style_pvalue(.x, digits = 2)) %>%
add_n() %>%
modify_header(label ~ "**Prognositic marker**") %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Gold standard Ki67 status**")
#| label: infer-nuclear_atypia
# Will use univariate logit to get odd ratio and ci
logit_nuclear_atypia <- glm(Ki67 ~ nuclear_atypia, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1))), family = "binomial")
logit_nuclear_atypia %>% tab_model()
#| label: infer-micotic
# Will use univariate logit to get odd ratio and ci
logit_mitotoc <- glm(Ki67 ~ mitotoc, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1))), family = "binomial")
logit_mitotoc %>% tab_model()
#| label: infer-ulceration
# Will use univariate logit to get odd ratio and ci
logit_ulceration <- glm(Ki67 ~ ulceration, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1))), family = "binomial")
logit_ulceration %>% tab_model()
#| label: infer-sex
# Will use univariate logit to get odd ratio and ci, be careful has to set reference level for Ki67 to 0
logit_sex <- glm(Ki67 ~ sex, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1))), family = "binomial")
logit_sex %>% tab_model()
#| label: infer-loc-self
# Will use univariate logit to get odd ratio and ci, be careful has to set reference level for Ki67 to 0
logit_location_self <- glm(Ki67 ~ location_self, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1))) %>% filter(location_self!=3), family = "binomial")
logit_location_self %>% tab_model()
#| label: infer-loc-report
# Will use univariate logit to get odd ratio and ci, be careful has to set reference level for Ki67 to 0
logit_location_report <- glm(Ki67 ~ location_report, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1))), family = "binomial")
logit_location_report %>% tab_model()
#| label: infer-tumor-report
# Will use univariate logit to get odd ratio and ci, be careful has to set reference level for Ki67 to 0
logit_tumor_thick <- glm(Ki67 ~ tumor_thickness, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1)),tumor_mm=100*tumor_thickness), family = "binomial")
logit_tumor_mm <- glm(Ki67 ~ tumor_mm, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1)),tumor_mm=100*tumor_thickness), family = "binomial")
logit_beyond_dermis <- glm(Ki67 ~ beyond_dermis, data = Dat_Melanoma_clean %>% mutate(Ki67=factor(Ki67,levels=c(0,1)),tumor_mm=100*tumor_thickness), family = "binomial")
# logit_tumor_thick %>% tab_model()
# logit_tumor_mm %>% tab_model()
# logit_beyond_dermis %>% tab_model()
#| label: cor-tetra
#| warning: false
#| output-location: column-fragment
tetrachoric<-tetrachoric(Dat_Melanoma_clean %>% select(-case_number,-location_self,-location_report,-tumor_thickness,-mitotic_count) %>% mutate(sex=ifelse(sex=="F",1,0),intact=ifelse(intact=="I",1,0)) %>%  mutate_all(as.character) %>% mutate_all(as.numeric))
tetrachoric$rho %>% round(2) %>% data.frame() %>%
rownames_to_column(" ") %>%
gt()
#| label: cor-polychor
#| warning: false
polychoric<-polychoric(Dat_Melanoma_clean %>% select(Ki67,location_self,location_report) %>% mutate_all(as.character) %>% mutate_all(as.numeric))
polychoric$rho %>% round(2) %>% data.frame() %>%
rownames_to_column(" ") %>%
gt()
#| label: tbl-cramerV
#| tbl-cap: Cramer's V for categorical variables
cramer<-c(cramersv(Dat_Melanoma_clean %>% select(Ki67,location_self) %>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,location_report)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,sex)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,intact)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,nuclear_atypia)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,mitotoc)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,pigment)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,ulceration)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,beyond_dermis)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()),
cramersv(Dat_Melanoma_clean %>% select(Ki67,size)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame()))
# data.frame(marker=names(Dat_Melanoma_clean)[3:12],cramerV=cramer %>% round(3))
ci_cramer_location_self<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,location_self)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_location_report<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,location_report)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_sex<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,sex)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_intact<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,intact)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_nuclear_atypia<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,nuclear_atypia)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_mitotoc<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,mitotoc)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_pigment<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,pigment)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_ulceration<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,ulceration)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_beyond_dermis<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,beyond_dermis)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
ci_cramer_size<-ci_cramersv(
Dat_Melanoma_clean %>% select(Ki67,size)%>% drop_na() %>% mutate_all(as.numeric) %>% as.data.frame() ,
probs = c(0.025, 0.975),
type = c( "bootstrap"),
boot_type = c("bca"),
R = 500L,
)
cramerV<-c(ci_cramer_location_self$estimate,ci_cramer_location_report$estimate,ci_cramer_sex$estimate,ci_cramer_intact$estimate,ci_cramer_nuclear_atypia$estimate,ci_cramer_mitotoc$estimate,ci_cramer_pigment$estimate,ci_cramer_ulceration$estimate,ci_cramer_beyond_dermis$estimate,ci_cramer_size$estimate)
cramerVlower<-c(ci_cramer_location_self$interval %>% pluck(1),ci_cramer_location_report$interval %>% pluck(1),ci_cramer_sex$interval %>% pluck(1),ci_cramer_intact$interval %>% pluck(1),ci_cramer_nuclear_atypia$interval %>% pluck(1),ci_cramer_mitotoc$interval %>% pluck(1),ci_cramer_pigment$interval %>% pluck(1),ci_cramer_ulceration$interval %>% pluck(1),ci_cramer_beyond_dermis$interval %>% pluck(1),ci_cramer_size$interval %>% pluck(1))
cramerVupper<-c(ci_cramer_location_self$interval %>% pluck(2),ci_cramer_location_report$interval %>% pluck(2),ci_cramer_sex$interval %>% pluck(2),ci_cramer_intact$interval %>% pluck(2),ci_cramer_nuclear_atypia$interval %>% pluck(2),ci_cramer_mitotoc$interval %>% pluck(2),ci_cramer_pigment$interval %>% pluck(2),ci_cramer_ulceration$interval %>% pluck(2),ci_cramer_beyond_dermis$interval %>% pluck(2),ci_cramer_size$interval %>% pluck(2))
data.frame(marker=names(Dat_Melanoma_clean)[3:12],cramerV=cramerV %>% round(3),lower=cramerVlower%>% round(3),upper=cramerVupper%>% round(3)) %>%
gt() %>%
tab_spanner(
label = "95% bootstrap confidence interval(Rep=500)",
columns = c(lower,upper)
)
#| label: cor-x2y
#Based on Information Theory, a new metric - the x2y metric - was devised to quantify the strength of the association between pairs of variables.
# https://rviews.rstudio.com/2021/04/15/an-alternative-to-the-correlation-coefficient-that-works-for-numeric-and-categorical-variables/
#| label: nuclear_atypia_accuracy
# this blog recommends # install.packages("DTComPair")
#https://library.virginia.edu/data/articles/comparing-the-accuracy-of-two-binary-diagnostic-tests-in-a-paired-study-design
Dat_Melanoma_cells<-Dat_Melanoma_clean %>% mutate(nuclear_atypia_cell=case_when(
Ki67==1 & nuclear_atypia==1 ~ "TP",
Ki67==0 & nuclear_atypia==1 ~ "FP",
Ki67==1 & nuclear_atypia==0 ~ "FN",
Ki67==0 & nuclear_atypia==0 ~ "TN",
), mitotoc_cell=case_when(
Ki67==1 & mitotoc==1 ~ "TP",
Ki67==0 & mitotoc==1 ~ "FP",
Ki67==1 & mitotoc==0 ~ "FN",
Ki67==0 & mitotoc==0 ~ "TN",
),pigment_cell=case_when(
Ki67==1 & pigment==1 ~ "TP",
Ki67==0 & pigment==1 ~ "FP",
Ki67==1 & pigment==0 ~ "FN",
Ki67==0 & pigment==0 ~ "TN",
),ulceration_cell=case_when(
Ki67==1 & ulceration==1 ~ "TP",
Ki67==0 & ulceration==1 ~ "FP",
Ki67==1 & ulceration==0 ~ "FN",
Ki67==0 & ulceration==0 ~ "TN",
),beyond_dermis_cell=case_when(
Ki67==1 & beyond_dermis==1 ~ "TP",
Ki67==0 & beyond_dermis==1 ~ "FP",
Ki67==1 & beyond_dermis==0 ~ "FN",
Ki67==0 & beyond_dermis==0 ~ "TN",
),size_cell=case_when(
Ki67==1 & size==1 ~ "TP",
Ki67==0 & size==1 ~ "FP",
Ki67==1 & size==0 ~ "FN",
Ki67==0 & size==0 ~ "TN",
))
nuclear_atypia_cellcount<-Dat_Melanoma_cells %>% count(nuclear_atypia_cell) %>% drop_na()
mitotoc_cellcount<-Dat_Melanoma_cells %>% count(mitotoc_cell)%>% drop_na()
pigment_cellcount<-Dat_Melanoma_cells %>% count(pigment_cell)%>% drop_na()
ulceration_cellcount<-Dat_Melanoma_cells %>% count(ulceration_cell)%>% drop_na()
beyond_dermis_cellcount<-Dat_Melanoma_cells %>% count(beyond_dermis_cell)%>% drop_na() %>% bind_rows(data.frame(beyond_dermis_cell="FP",n=0))
size_cellcount<-Dat_Melanoma_cells %>% count(size_cell)%>% drop_na()
nuclear_atypia_tab <- read.tab.1test(a = 11, b = 10, c = 81, d = 17,
testname = "nuclear_atypia")
acc.1test(nuclear_atypia_tab)
pigment_cellcount
pigment_tab <- read.tab.1test(a = 20, b =50 , c = 8, d = 41,
testname = "pigment")
acc.1test(pigment_tab)
<-Dat_Melanoma_cells %>% count(ulceration_cell)%>% drop_na()
<-Dat_Melanoma_cells %>% count(ulceration_cell)%>% drop_na()
ulceration_cellcount<-Dat_Melanoma_cells %>% count(ulceration_cell)%>% drop_na()
ulceration_cellcount
ulceration_tab <- read.tab.1test(a = 10, b =12 , c = 18, d = 79,
testname = "ulceration")
acc.1test(ulceration_tab)
beyond_dermis_cellcount<-Dat_Melanoma_cells %>% count(beyond_dermis_cell)%>% drop_na() %>% bind_rows(data.frame(beyond_dermis_cell="FP",n=0))
beyond_dermis_tab <- read.tab.1test(a = 10, b =12 , c = 18, d = 79,
testname = "beyond_dermis")
beyond_dermis_cellcount
beyond_dermis_tab <- read.tab.1test(a = 2, b= 0, c = 25, d = 88,
testname = "beyond_dermis")
acc.1test(beyond_dermis_tab)
size_cellcount<-Dat_Melanoma_cells %>% count(size_cell)%>% drop_na()
size_cellcount
size_tab <- read.tab.1test(a = 2, b= 4, c = 26, d = 87,
testname = "size")
acc.1test(size_tab)
2/28
87/91
size_cellcount
11/28
nuclear_atypia_tab <- read.tab.1test(a = 11, b = 10, c = 17, d = 81,
testname = "nuclear_atypia")
acc.1test(nuclear_atypia_tab)
11/21
11/28
11/21
81/88
81/98
mitotoc_cellcount
mitotoc_tab <- read.tab.1test(a = 26, b =18 , c = 2, d = 74,
testname = "mitotoc")
acc.1test(mitotoc_tab)
26/28
74/92
pigment_cellcount<-Dat_Melanoma_cells %>% count(pigment_cell)%>% drop_na()
pigment_tab <- read.tab.1test(a = 20, b =50 , c = 8, d = 41,
testname = "pigment")
acc.1test(pigment_tab)
20/28
41/91
ulceration_tab <- read.tab.1test(a = 10, b =12 , c = 18, d = 79,
testname = "ulceration")
acc.1test(ulceration_tab)
10/28
79/91
beyond_dermis_tab <- read.tab.1test(a = 2, b= 0, c = 25, d = 88,
testname = "beyond_dermis")
acc.1test(beyond_dermis_tab)
2/27
size_tab <- read.tab.1test(a = 2, b= 4, c = 26, d = 87,
testname = "size")
acc.1test(size_tab)
2/28
87/91
#| label: load-packages
#| include: false
pacman::p_load(## file folder setup
fs,   # creat folder dir_create()
here, # easy to do cross reference in the project.
## Data step
readr,
readxl, # read_excel()
tidyverse,
janitor,
## IDA
Hmisc,
## Model
meta,
metafor,
# dmetar, #for find.outliers()
lme4,
glmmTMB,
broom,
emmeans,
rpart, # for dx2y()
psych, #
confintr, #for cramersv(), also good bootstrap CI tools.
DTComPair, # for sensitivity, specificity, PPV and NPV for diagnostics tests.
## result reporting
### graph
ggplot2,
### table
gt,
gtsummary,
knitr,        # for kable()
sjPlot      # tab_model()
)
set.seed(42004063)
#| label: import-data
#| include: false
#I have tried whole morning to import data all show can not open connection. Start a new qmd and copy paste code works
Melanoma_Project_For_STATS_final <- read_csv(here("Data/Raw/Melanoma Project For STATS final.csv"),
col_types = cols(`Case  Number` = col_character(),
`GOLD STANDARD    Ki67: >15%= 1, <15% = 0` = col_factor(levels = c("1",
"0")), `1= haired 2=both 3= conjunctiva - slides we look at in person` = col_factor(levels = c("1",
"2", "3")), `For stats, all locations for all cases, including slides we didn't see in person (1= haired 2=haired/junction 3= conjunctiva 4= unknown` = col_factor(levels = c("1",
"2", "3", "4")), `Female/Male` = col_factor(levels = c("F",
"M")), `Intact/altered` = col_factor(levels = c("I",
"A")), `nuclear atypia: >20%= 1, <20% =0` = col_factor(levels = c("0",
"1")), `mitotic count 3+ = 1, <3=0` = col_factor(levels = c("0",
"1")), `degree of pigmentation (<50%, low, moderate =1), >50%  or high = 0` = col_factor(levels = c("0",
"1")), `ulceration yes=1, no=0` = col_factor(levels = c("0",
"1")), `beyond dermis= 1, not beyond dermis =0` = col_factor(levels = c("0",
"1")), `>0.95 cm = 1, <0.95 cm = 0` = col_factor(levels = c("0",
"1")), `tumor thickness (cm)` = col_number(),
`Mitotic count (in 10 hpf)` = col_number()))
Dat_Melanoma_clean <- Melanoma_Project_For_STATS_final %>% clean_names() %>% set_names("case_number","Ki67","location_self","location_report","sex","intact","nuclear_atypia","mitotoc","pigment","ulceration","beyond_dermis","size","tumor_thickness","mitotic_count")
Dat_Melanoma_clean
#|label: IDA-describe
#gotta use namespace Hmisc otherwise out of script
d_Melanoma <- Hmisc::describe(Dat_Melanoma_clean)
Hmisc::html(d_Melanoma, size=90, scroll=TRUE)
#| label: tbl-descriptive-stats
#| tbl-cap: Descriptive-stats by Ki67 status
Dat_Melanoma_clean %>%
select(-case_number) %>%
tbl_summary(
by = "Ki67",
type = all_continuous() ~ "continuous2",
statistic = list(
all_continuous() ~ c("{mean} ({sd})",
"{median} ({p25}, {p75})"),
all_categorical() ~ "{n} / {N} ({p}%)"
),
digits = all_continuous() ~ 2,
missing_text = "(Missing)"
) %>%
add_p(pvalue_fun = ~ style_pvalue(.x, digits = 2)) %>%
add_n() %>%
modify_header(label ~ "**Prognositic marker**") %>%
modify_spanning_header(c("stat_1", "stat_2") ~ "**Gold standard Ki67 status**")
#| label: load-packages
#| include: false
pacman::p_load(## file folder setup
fs,   # creat folder dir_create()
here, # easy to do cross reference in the project.
## Data step
readr,
readxl, # read_excel()
tidyverse,
janitor,
## IDA
Hmisc,
## Model
meta,
metafor,
# dmetar, #for find.outliers()
lme4,
glmmTMB,
broom,
emmeans,
rpart, # for dx2y()
psych, #
confintr, #for cramersv(), also good bootstrap CI tools.
# diagostic tests
DTComPair, # for sensitivity, specificity, PPV and NPV for diagnostics tests.
ROCit, #for ROC and graph
## result reporting
### graph
ggplot2,
### table
gt,
gtsummary,
knitr,        # for kable()
sjPlot      # tab_model()
)
set.seed(42004063)
Dat_Melanoma_clean
View(Diabetes)
Dat_Melanoma_clean
oc_empirical <- rocit(score = Dat_Melanoma_clean$mitotic_count, class = Dat_Melanoma_clean$Ki67,
negref = "-")
oc_empirical <- rocit(score = Dat_Melanoma_clean$mitotic_count, class =Dat_Melanoma_clean$Ki67,
negref = "-")
roc_empirical <- rocit(score = Dat_Melanoma_clean$mitotic_count, class =Dat_Melanoma_clean$Ki67,
negref = "-")
data("Diabetes")
summary(Diabetes$dtest)
Diabetes$dtest
roc_empirical <- rocit(score = Dat_Melanoma_clean$mitotic_count, class =Dat_Melanoma_clean$Ki67,
negref = "0")
roc_empirical
Dat_Melanoma_clean
summary(roc_empirical)
cbind(Cutoff=roc_empirical$Cutoff,
TPR=roc_empirical$TPR,
FPR=roc_empirical$FPR)
as.tibble(Cutoff=roc_empirical$Cutoff,
TPR=roc_empirical$TPR,
FPR=roc_empirical$FPR)
as.data.frame(Cutoff=roc_empirical$Cutoff,
TPR=roc_empirical$TPR,
FPR=roc_empirical$FPR)
roc_empirical$Cutoff
roc_empirical$TPR
data.frame(Cutoff=roc_empirical$Cutoff,
TPR=roc_empirical$TPR,
FPR=roc_empirical$FPR)
tibble(Cutoff=roc_empirical$Cutoff,
TPR=roc_empirical$TPR,
FPR=roc_empirical$FPR)
tibble(Cutoff=roc_empirical$Cutoff,
TPR=roc_empirical$TPR,
FPR=roc_empirical$FPR) %>% gt()
tibble(Cutoff=roc_empirical$Cutoff,
Sensitivity=roc_empirical$TPR,
"1-Specificity"=roc_empirical$FPR,
specificity=1-roc_empirical$FPR) %>% gt()
plot(roc_empirical, values = F)
roc_empirical
class(roc_empirical)
names(roc_empirical)
roc_empirical$AUC
roc_empirical$Cutoff
#| label: fig-roc
plot(roc_empirical, values = F)
roc_empirical$AUC
